import { useClient } from "@backend/client";
import { useAppDispatch } from "@store/hooks";
import { setNavigationDashboardSubpage } from "@store/navigation/navigationSlice";
import { IPageToken } from "@types";
import { Divider } from "antd";
import { useEffect, useState } from "react";

const InternalPolicyPage = () => {
  const dispatch = useAppDispatch();
  dispatch(setNavigationDashboardSubpage("–î–æ—Ç–æ–æ–¥ –∂—É—Ä–∞–º"));

  const client = useClient();
  const [token, setToken] = useState<IPageToken | null>(null);
  const [isLoading, setIsLoading] = useState(true); // Spinner —Ö–∞—Ä–∞–≥–¥–∞—Ö —Ç”©–ª”©–≤

  useEffect(() => {
    const fetchTokens = async () => {
      const res = await client.getTokens("internal_policy");

      if (res.success) {
        setToken(res.data![0]);
      }
    };
    fetchTokens();
  }, []);

  const handleIframeLoad = () => {
    setIsLoading(false); // Iframe –∞—á–∞–∞–ª–∞–≥–¥—Å–∞–Ω—ã –¥–∞—Ä–∞–∞ spinner-–∏–π–≥ –Ω—É—É—Ö
  };

  return (
    <div className="flex flex-col items-center justify-center p-3">
      <p className="mb-4 text-center text-2xl font-semibold">
        –ö–æ–º–ø–∞–Ω–∏ –î–æ—Ç–æ–æ–¥ –ñ—É—Ä–∞–º
      </p>
      <Divider />

      
      {isLoading && (
        <div className="flex h-[75vh] w-full items-center justify-center">
          <div className="flex flex-col items-center text-xl text-gray-600">
          
            <div className="animate-bounce text-2xl">üëÄ</div>
            <p className="animate-fade-in mt-2 text-lg font-medium">
              –¢“Ø—Ä —Ö“Ø–ª—ç—ç–Ω—ç “Ø“Ø...  
            </p>
          </div>
        </div>
      )}

      {/* Iframe –∞—á–∞–∞–ª–∞–≥–¥—Å–∞–Ω “Ø–µ–¥ —Ö–∞—Ä–∞–≥–¥–∞—Ö —Ö—ç—Å—ç–≥ */}
      {token && (
        <iframe
          src={`https://docs.google.com/gview?url=${token.image}&embedded=true`}
          className={`h-[75vh] w-full ${isLoading ? "hidden" : "block"}`} // Spinner —Ö–∞—Ä–∞–≥–¥–∞—Ö “Ø–µ–¥ iframe –Ω—É—É—Ö
          onLoad={handleIframeLoad} // –ê—á–∞–∞–ª–∞–ª—Ç –¥—É—É—Å–º–∞–≥—Ü spinner-–∏–π–≥ –Ω—É—É—Ö
        ></iframe>
      )}

      {/* Token –±–∞–π—Ö–≥“Ø–π “Ø–µ–¥ –∞–ª–¥–∞–∞ —Ö–∞—Ä—É—É–ª–∞—Ö */}
      {!token && !isLoading && (
        <p className="text-center text-gray-500">–ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.</p>
      )}
    </div>
  );
};

export default InternalPolicyPage;
